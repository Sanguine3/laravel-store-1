<?php

namespace App\Http\Controllers\Customer\CheckoutActions;

use App\Http\Controllers\Controller;
use App\Http\Requests\Customer\Checkout\ProcessCheckoutRequest;
use App\Mail\OrderProcessedMail;
use App\Models\Order;
use App\Models\OrderItem;
use Exception;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Session;

class ProcessController extends Controller
{
    /**
     * Handle the incoming request.
     */
    public function __invoke(ProcessCheckoutRequest $request)
    {
        // Authorization (auth check & non-empty cart) and validation are now handled by ProcessCheckoutRequest
        $validatedData = $request->validated();
        $cart = Session::get('cart', []); // Still need cart data for processing

        // The empty cart check is handled by ProcessCheckoutRequest's authorize method.
        // If an edge case allows submission with an empty cart post-authorization (e.g. session cleared between form load and submit),
        // an additional check here might be desired, but FormRequest should prevent controller action.
        if (empty($cart)) {
            // This case should ideally not be reached if authorize() in FormRequest works as expected
            // and ShowFormController also checks.
            return redirect()->route('cart.view')->with('error', 'Your cart became empty during checkout. Please try again.');
        }

        DB::beginTransaction();

        try {
            $totalAmount = 0;
            foreach ($cart as $item) {
                $totalAmount += $item['price'] * $item['quantity'];
            }

            $order = Order::create([
                'user_id' => Auth::check() ? Auth::id() : null,
                'total_amount' => $totalAmount,
                'status' => 'pending', // Default status, payment_status also defaults to 'pending' via migration
                // order_number is auto-generated by the model event

                'shipping_address' => $validatedData['shipping_address'],
                'billing_address' => $validatedData['billing_address'] ?? null, // Use null if not provided
                'payment_method' => $validatedData['payment_method'],
                'notes' => $validatedData['notes'] ?? null,
                // 'payment_status' will use its default from the migration ('pending')
            ]);

            foreach ($cart as $productId => $details) {
                OrderItem::create([
                    'order_id' => $order->id,
                    'product_id' => $productId, // Ensure $productId is the actual product ID
                    'quantity' => $details['quantity'],
                    'price' => $details['price'],
                ]);
            }

            DB::commit();

            // Handle email confirmation preference
            // 'receive_email_confirmation' is nullable|boolean, so it will be in $validatedData if present.
            // If the checkbox is not checked, it might not be submitted, hence the ?? false.
            if ($validatedData['receive_email_confirmation'] ?? false) {
                // Eager load relationships needed for the email template
                $order->load('user', 'orderItems.product');

                try {
                    Mail::to($validatedData['email'])->send(new OrderProcessedMail($order, $validatedData['name'], $validatedData['email']));
                    Log::info("Order processed email sent to {$validatedData['email']} for order {$order->id}.");
                } catch (Exception $e) {
                    // Log email sending failure but don't let it break the checkout flow
                    Log::error("Failed to send order processed email for order {$order->id}: " . $e->getMessage());
                }
            }

            Session::forget('cart');

            // Redirect to an order success page or customer's order history
            return redirect()->route('orders.show', $order)->with('success', 'Your order #' . $order->order_number . ' has been placed successfully! Details below.');

        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Checkout Error: ' . $e->getMessage());
            return back()->with('error', 'There was an error processing your order. Please try again.')->withInput();
        }
    }
}
